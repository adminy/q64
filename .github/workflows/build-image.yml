name: Build Quartz64 Images
on:
  workflow_dispatch:
    inputs:
      name:
        type: choice
        description: Name of the board model
        options:
        - Quartz64 Model A
        - Quartz64 Model B
        - SOQuartz Blade
        - SOQuartz CM4 IO Board
        - SOQuartz Model A
        - EVB
        required: true
        default: 'SOQuartz CM4 IO Board'
      uboot-config:
        type: choice
        description: U-Boot defconfig file
        options:
        - quartz64-a-rk3566_defconfig
        - quartz64-b-rk3566_defconfig
        - soquartz-blade-rk3566_defconfig
        - soquartz-cm4io-rk3566_defconfig
        - soquartz-model-a-rk3566_defconfig
        - evb-rk3568_defconfig
        required: true
        default: 'soquartz-cm4io-rk3566_defconfig'
      uboot-name:
        type: choice
        description: U-Boot Name
        options:
        - quartz64a
        - quartz64b
        - soquartz-blade
        - soquartz-cm4io
        - soquartz-model-a
        - evb-rk3568
        required: true
        default: 'soquartz-cm4io'
      yml:
        type: choice
        description: Debos Yaml Configuration file
        options:
        - quartz64a
        - quartz64b
        - soquartz-blade
        - soquartz-cm4
        - soquartz-model-a
        required: true
        default: 'soquartz-cm4'
jobs:
  build_uboot:
    runs-on: ubuntu-latest
    steps:
      - name: Install toolchain
        run: |
            sudo apt-get update
            sudo apt-get install build-essential crossbuild-essential-arm64 device-tree-compiler python3-pyelftools
      - name: Clone workflow repository
        uses: actions/checkout@v3
        with:
            submodules: true
      - name: Clean u-boot
        run: |
          cd u-boot-quartz64
          # printf "\n# U-Boot load from NVME\nCONFIG_CMD_NVME=y\nCONFIG_NVME=y\nCONFIG_NVME_PCI=y\nCONFIG_PCI=y\nCONFIG_PCI_PNP=y\nCONFIG_PCI_ENHANCED_ALLOCATION=y\nCONFIG_PCIE_DW_COMMON=y\nCONFIG_PCIE_DW_ROCKCHIP=y\nCONFIG_PHY=y\nCONFIG_PHY_ROCKCHIP_SNPS_PCIE3=y\nCONFIG_PCIE_ROCKCHIP=y\nCONFIG_PHY_ROCKCHIP_PCIE=y" >> ./configs/${{ github.event.inputs.uboot-config }}
          make mrproper
      - name: Fetch rkbins
        run: |
          wget -q https://github.com/rockchip-linux/rkbin/raw/d6ccfe401ca84a98ca3b85c12b9554a1a43a166c/bin/rk35/rk3568_bl31_v1.42.elf -O u-boot-quartz64/rk3568_bl31_v1.42.elf
          wget -q https://github.com/rockchip-linux/rkbin/raw/d6ccfe401ca84a98ca3b85c12b9554a1a43a166c/bin/rk35/rk3566_ddr_1056MHz_v1.16.bin -O u-boot-quartz64/rk3566_ddr_1056MHz_v1.16.bin
      - name: Build u-boot
        run: |
          cd u-boot-quartz64
          export ROCKCHIP_TPL=rk3566_ddr_1056MHz_v1.16.bin
          export BL31=rk3568_bl31_v1.42.elf
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- ${{ github.event.inputs.uboot-config }}
          make ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)
      - name: Archive u-boot artifacts
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-${{ github.event.inputs.uboot-name }}
          path: |
            u-boot-quartz64/u-boot-rockchip.bin
            u-boot-quartz64/u-boot-rockchip-spi.bin
  # build_kernel:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Clone workflow repository
  #       uses: actions/checkout@v3
  #     - name: Install toolchain
  #       run: |
  #           sudo apt-get -yq update && sudo apt-get -yq upgrade
  #           sudo apt-get -yq install build-essential crossbuild-essential-arm64 device-tree-compiler \
  #           autoconf bc bison flex ccache cpio dkms fakeroot kmod quilt rsync dh-exec \
  #           libssl-dev libncurses-dev libelf-dev libudev-dev libpci-dev libiberty-dev
  #     - name: Clone kernel repository
  #       uses: actions/checkout@v3
  #       with:
  #         repository: 'CounterPillow/linux'
  #         ref: 'quartz64-deploy'
  #         path: 'linux'
  #     - name: Make config
  #       run: |
  #         cp config linux/.config
  #         cd linux
  #         make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- olddefconfig
  #     - name: Build kernel
  #       run: |
  #         cd linux
  #         make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- deb-pkg
  #     - name: Archive kernel artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: linux-kernel
  #         path: |
  #           linux-image-*.deb
  #           linux-libc-dev*.deb
  #           !linux-image-*dbg*.deb
  build_image:
    runs-on: ubuntu-latest
    needs:
      - build_uboot
    env:
      GOPATH: /opt/src/gocode
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
      - name: Download u-boot artifacts
        uses: actions/download-artifact@v3
        with:
          name: u-boot-${{ github.event.inputs.uboot-name}}
          path: debos-recipes/u-boot/
      - name: Install debos dependencies
        run: |
          sudo add-apt-repository ppa:longsleep/golang-backports
          sudo apt-get update
          sudo apt-get install golang-go git libglib2.0-dev libostree-dev \
                               qemu-system-x86 qemu-user-static debootstrap \
                               systemd-container
      - name: Install debos
        run: go install -v github.com/go-debos/debos/cmd/debos@latest
      - name: Build ${{ github.event.inputs.name }} Image
        run: sudo /opt/src/gocode/bin/debos --disable-fakemachine debos-recipes/debian-${{ github.event.inputs.yml }}.yaml
      - name: Archive image artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.name }} Image
          path: |
            *.img.xz
  do_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - build_image
    steps:
      - name: Clone workflow repository
        uses: actions/checkout@v3
      - name: Download image artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Generate checksums
        run: |
          ./generate-release-checksums.sh artifacts/
      - name: Tar up u-boot binaries
        run: |
          tar -caf u-boot.tar.gz artifacts/u-boot*
      - name: Make release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            artifacts/**/plebian*.img.xz
            artifacts/**/plebian*.img.xz.sha256
            u-boot.tar.gz
